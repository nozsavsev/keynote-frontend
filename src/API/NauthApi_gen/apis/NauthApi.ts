/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePermissionDTO,
  FullSessionDTOResponseWrapper,
  PermissionDTOResponseWrapper,
  ServiceDTOResponseWrapper,
  ServiceUpdateUserPermissionsDTO,
  StringResponseWrapper,
  UserDTOListResponseWrapper,
  UserDTOResponseWrapper,
} from '../models/index';
import {
    CreatePermissionDTOFromJSON,
    CreatePermissionDTOToJSON,
    FullSessionDTOResponseWrapperFromJSON,
    FullSessionDTOResponseWrapperToJSON,
    PermissionDTOResponseWrapperFromJSON,
    PermissionDTOResponseWrapperToJSON,
    ServiceDTOResponseWrapperFromJSON,
    ServiceDTOResponseWrapperToJSON,
    ServiceUpdateUserPermissionsDTOFromJSON,
    ServiceUpdateUserPermissionsDTOToJSON,
    StringResponseWrapperFromJSON,
    StringResponseWrapperToJSON,
    UserDTOListResponseWrapperFromJSON,
    UserDTOListResponseWrapperToJSON,
    UserDTOResponseWrapperFromJSON,
    UserDTOResponseWrapperToJSON,
} from '../models/index';

export interface ApiNauthCreateServicePermissionPostRequest {
    createPermissionDTO?: CreatePermissionDTO;
}

export interface ApiNauthDecodeUserTokenPostRequest {
    token?: string;
}

export interface ApiNauthDeleteServicePermissionPostRequest {
    permissionId?: string;
}

export interface ApiNauthFetchUsersPostRequest {
    match?: string;
    skip?: number;
    take?: number;
}

export interface ApiNauthGetUserByIdPostRequest {
    userId?: string;
}

export interface ApiNauthGetUserBySessionIdPostRequest {
    sessionId?: string;
}

export interface ApiNauthUpdateUserPermissionsPostRequest {
    serviceUpdateUserPermissionsDTO?: ServiceUpdateUserPermissionsDTO;
}

/**
 * 
 */
export class NauthApi extends runtime.BaseAPI {

    /**
     */
    async apiNauthCreateServicePermissionPostRaw(requestParameters: ApiNauthCreateServicePermissionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionDTOResponseWrapper>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Nauth/createServicePermission`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionDTOToJSON(requestParameters['createPermissionDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthCreateServicePermissionPost(requestParameters: ApiNauthCreateServicePermissionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionDTOResponseWrapper> {
        const response = await this.apiNauthCreateServicePermissionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthCurrentServiceGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceDTOResponseWrapper>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/currentService`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthCurrentServiceGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDTOResponseWrapper> {
        const response = await this.apiNauthCurrentServiceGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthDecodeUserTokenPostRaw(requestParameters: ApiNauthDecodeUserTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullSessionDTOResponseWrapper>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/decodeUserToken`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullSessionDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthDecodeUserTokenPost(requestParameters: ApiNauthDecodeUserTokenPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullSessionDTOResponseWrapper> {
        const response = await this.apiNauthDecodeUserTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthDeleteServicePermissionPostRaw(requestParameters: ApiNauthDeleteServicePermissionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResponseWrapper>> {
        const queryParameters: any = {};

        if (requestParameters['permissionId'] != null) {
            queryParameters['permissionId'] = requestParameters['permissionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/deleteServicePermission`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthDeleteServicePermissionPost(requestParameters: ApiNauthDeleteServicePermissionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResponseWrapper> {
        const response = await this.apiNauthDeleteServicePermissionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthFetchUsersPostRaw(requestParameters: ApiNauthFetchUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTOListResponseWrapper>> {
        const queryParameters: any = {};

        if (requestParameters['match'] != null) {
            queryParameters['match'] = requestParameters['match'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/fetchUsers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOListResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthFetchUsersPost(requestParameters: ApiNauthFetchUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTOListResponseWrapper> {
        const response = await this.apiNauthFetchUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthGetUserByIdPostRaw(requestParameters: ApiNauthGetUserByIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/getUserById`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthGetUserByIdPost(requestParameters: ApiNauthGetUserByIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTOResponseWrapper> {
        const response = await this.apiNauthGetUserByIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthGetUserBySessionIdPostRaw(requestParameters: ApiNauthGetUserBySessionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullSessionDTOResponseWrapper>> {
        const queryParameters: any = {};

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Nauth/getUserBySessionId`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullSessionDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthGetUserBySessionIdPost(requestParameters: ApiNauthGetUserBySessionIdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullSessionDTOResponseWrapper> {
        const response = await this.apiNauthGetUserBySessionIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNauthUpdateUserPermissionsPostRaw(requestParameters: ApiNauthUpdateUserPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullSessionDTOResponseWrapper>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Nauth/updateUserPermissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceUpdateUserPermissionsDTOToJSON(requestParameters['serviceUpdateUserPermissionsDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullSessionDTOResponseWrapperFromJSON(jsonValue));
    }

    /**
     */
    async apiNauthUpdateUserPermissionsPost(requestParameters: ApiNauthUpdateUserPermissionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullSessionDTOResponseWrapper> {
        const response = await this.apiNauthUpdateUserPermissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
