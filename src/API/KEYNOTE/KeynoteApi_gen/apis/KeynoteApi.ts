/* tslint:disable */
/* eslint-disable */
/**
 * ketnote-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { KeynoteDTOResponseWrapper, KeynoteTransitionType, KeynoteType, StringResponseWrapper } from "../models/index";
import {
  KeynoteDTOResponseWrapperFromJSON,
  KeynoteDTOResponseWrapperToJSON,
  KeynoteTransitionTypeFromJSON,
  KeynoteTransitionTypeToJSON,
  KeynoteTypeFromJSON,
  KeynoteTypeToJSON,
  StringResponseWrapperFromJSON,
  StringResponseWrapperToJSON,
} from "../models/index";

export interface ApiKeynoteCreateKeynotePostRequest {
  keynote?: Blob;
  mobileKeynote?: Blob;
  presentorNotes?: Blob;
  transitionType?: KeynoteTransitionType;
  type?: KeynoteType;
  totalFrames?: number;
  name?: string;
  description?: string;
}

export interface ApiKeynoteDeleteKeynoteDeleteRequest {
  keynoteId?: string;
}

/**
 *
 */
export class KeynoteApi extends runtime.BaseAPI {
  /**
   */
  async apiKeynoteCreateKeynotePostRaw(
    requestParameters: ApiKeynoteCreateKeynotePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeynoteDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["keynote"] != null) {
      formParams.append("Keynote", requestParameters["keynote"] as any);
    }

    if (requestParameters["mobileKeynote"] != null) {
      formParams.append("MobileKeynote", requestParameters["mobileKeynote"] as any);
    }

    if (requestParameters["presentorNotes"] != null) {
      formParams.append("PresentorNotes", requestParameters["presentorNotes"] as any);
    }

    if (requestParameters["transitionType"] != null) {
      formParams.append("TransitionType", requestParameters["transitionType"] as any);
    }

    if (requestParameters["type"] != null) {
      formParams.append("Type", requestParameters["type"] as any);
    }

    if (requestParameters["totalFrames"] != null) {
      formParams.append("TotalFrames", requestParameters["totalFrames"] as any);
    }

    if (requestParameters["name"] != null) {
      formParams.append("Name", requestParameters["name"] as any);
    }

    if (requestParameters["description"] != null) {
      formParams.append("Description", requestParameters["description"] as any);
    }

    let urlPath = `/api/Keynote/createKeynote`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => KeynoteDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiKeynoteCreateKeynotePost(
    requestParameters: ApiKeynoteCreateKeynotePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeynoteDTOResponseWrapper> {
    const response = await this.apiKeynoteCreateKeynotePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiKeynoteDeleteKeynoteDeleteRaw(
    requestParameters: ApiKeynoteDeleteKeynoteDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["keynoteId"] != null) {
      queryParameters["keynoteId"] = requestParameters["keynoteId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Keynote/deleteKeynote`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiKeynoteDeleteKeynoteDelete(
    requestParameters: ApiKeynoteDeleteKeynoteDeleteRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiKeynoteDeleteKeynoteDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
