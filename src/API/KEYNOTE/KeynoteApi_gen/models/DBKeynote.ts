/* tslint:disable */
/* eslint-disable */
/**
 * ketnote-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DBUser } from "./DBUser";
import { DBUserFromJSON, DBUserFromJSONTyped, DBUserToJSON, DBUserToJSONTyped } from "./DBUser";
import type { KeynoteTransitionType } from "./KeynoteTransitionType";
import {
  KeynoteTransitionTypeFromJSON,
  KeynoteTransitionTypeFromJSONTyped,
  KeynoteTransitionTypeToJSON,
  KeynoteTransitionTypeToJSONTyped,
} from "./KeynoteTransitionType";
import type { KeynoteType } from "./KeynoteType";
import { KeynoteTypeFromJSON, KeynoteTypeFromJSONTyped, KeynoteTypeToJSON, KeynoteTypeToJSONTyped } from "./KeynoteType";

/**
 *
 * @export
 * @interface DBKeynote
 */
export interface DBKeynote {
  /**
   *
   * @type {number}
   * @memberof DBKeynote
   */
  id?: number;
  /**
   *
   * @type {KeynoteTransitionType}
   * @memberof DBKeynote
   */
  transitionType?: KeynoteTransitionType;
  /**
   *
   * @type {KeynoteType}
   * @memberof DBKeynote
   */
  type?: KeynoteType;
  /**
   *
   * @type {number}
   * @memberof DBKeynote
   */
  totalFrames?: number;
  /**
   *
   * @type {string}
   * @memberof DBKeynote
   */
  keynoteUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof DBKeynote
   */
  mobileKeynoteUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof DBKeynote
   */
  presentorNotesUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof DBKeynote
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof DBKeynote
   */
  description?: string | null;
  /**
   *
   * @type {Date}
   * @memberof DBKeynote
   */
  createdAt?: Date;
  /**
   *
   * @type {number}
   * @memberof DBKeynote
   */
  userId?: number;
  /**
   *
   * @type {DBUser}
   * @memberof DBKeynote
   */
  user?: DBUser;
}

/**
 * Check if a given object implements the DBKeynote interface.
 */
export function instanceOfDBKeynote(value: object): value is DBKeynote {
  return true;
}

export function DBKeynoteFromJSON(json: any): DBKeynote {
  return DBKeynoteFromJSONTyped(json, false);
}

export function DBKeynoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): DBKeynote {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    transitionType: json["transitionType"] == null ? undefined : KeynoteTransitionTypeFromJSON(json["transitionType"]),
    type: json["type"] == null ? undefined : KeynoteTypeFromJSON(json["type"]),
    totalFrames: json["totalFrames"] == null ? undefined : json["totalFrames"],
    keynoteUrl: json["keynoteUrl"] == null ? undefined : json["keynoteUrl"],
    mobileKeynoteUrl: json["mobileKeynoteUrl"] == null ? undefined : json["mobileKeynoteUrl"],
    presentorNotesUrl: json["presentorNotesUrl"] == null ? undefined : json["presentorNotesUrl"],
    name: json["name"] == null ? undefined : json["name"],
    description: json["description"] == null ? undefined : json["description"],
    createdAt: json["createdAt"] == null ? undefined : new Date(json["createdAt"]),
    userId: json["userId"] == null ? undefined : json["userId"],
    user: json["user"] == null ? undefined : DBUserFromJSON(json["user"]),
  };
}

export function DBKeynoteToJSON(json: any): DBKeynote {
  return DBKeynoteToJSONTyped(json, false);
}

export function DBKeynoteToJSONTyped(value?: DBKeynote | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    transitionType: KeynoteTransitionTypeToJSON(value["transitionType"]),
    type: KeynoteTypeToJSON(value["type"]),
    totalFrames: value["totalFrames"],
    keynoteUrl: value["keynoteUrl"],
    mobileKeynoteUrl: value["mobileKeynoteUrl"],
    presentorNotesUrl: value["presentorNotesUrl"],
    name: value["name"],
    description: value["description"],
    createdAt: value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    userId: value["userId"],
    user: DBUserToJSON(value["user"]),
  };
}
