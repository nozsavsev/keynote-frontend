/* tslint:disable */
/* eslint-disable */
/**
 * ketnote-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServiceBasicDTO } from './ServiceBasicDTO';
import {
    ServiceBasicDTOFromJSON,
    ServiceBasicDTOFromJSONTyped,
    ServiceBasicDTOToJSON,
    ServiceBasicDTOToJSONTyped,
} from './ServiceBasicDTO';

/**
 * 
 * @export
 * @interface PermissionDTO
 */
export interface PermissionDTO {
    /**
     * 
     * @type {Date}
     * @memberof PermissionDTO
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof PermissionDTO
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermissionDTO
     */
    key?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PermissionDTO
     */
    name?: string | null;
    /**
     * 
     * @type {ServiceBasicDTO}
     * @memberof PermissionDTO
     */
    service?: ServiceBasicDTO;
    /**
     * 
     * @type {string}
     * @memberof PermissionDTO
     */
    serviceId?: string | null;
}

/**
 * Check if a given object implements the PermissionDTO interface.
 */
export function instanceOfPermissionDTO(value: object): value is PermissionDTO {
    return true;
}

export function PermissionDTOFromJSON(json: any): PermissionDTO {
    return PermissionDTOFromJSONTyped(json, false);
}

export function PermissionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'id': json['id'] == null ? undefined : json['id'],
        'key': json['key'] == null ? undefined : json['key'],
        'name': json['name'] == null ? undefined : json['name'],
        'service': json['service'] == null ? undefined : ServiceBasicDTOFromJSON(json['service']),
        'serviceId': json['serviceId'] == null ? undefined : json['serviceId'],
    };
}

export function PermissionDTOToJSON(json: any): PermissionDTO {
    return PermissionDTOToJSONTyped(json, false);
}

export function PermissionDTOToJSONTyped(value?: PermissionDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': value['createdAt'] === null ? null : ((value['createdAt'] as any)?.toISOString()),
        'id': value['id'],
        'key': value['key'],
        'name': value['name'],
        'service': ServiceBasicDTOToJSON(value['service']),
        'serviceId': value['serviceId'],
    };
}

