/* tslint:disable */
/* eslint-disable */
/**
 * ketnote-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SessionBasicDTO } from "./SessionBasicDTO";
import { SessionBasicDTOFromJSON, SessionBasicDTOFromJSONTyped, SessionBasicDTOToJSON, SessionBasicDTOToJSONTyped } from "./SessionBasicDTO";
import type { UserBasicDTO } from "./UserBasicDTO";
import { UserBasicDTOFromJSON, UserBasicDTOFromJSONTyped, UserBasicDTOToJSON, UserBasicDTOToJSONTyped } from "./UserBasicDTO";
import type { PermissionBasicDTO } from "./PermissionBasicDTO";
import {
  PermissionBasicDTOFromJSON,
  PermissionBasicDTOFromJSONTyped,
  PermissionBasicDTOToJSON,
  PermissionBasicDTOToJSONTyped,
} from "./PermissionBasicDTO";

/**
 *
 * @export
 * @interface ServiceDTO
 */
export interface ServiceDTO {
  /**
   *
   * @type {Date}
   * @memberof ServiceDTO
   */
  createdAt?: Date | null;
  /**
   *
   * @type {string}
   * @memberof ServiceDTO
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof ServiceDTO
   */
  name?: string | null;
  /**
   *
   * @type {Array<PermissionBasicDTO>}
   * @memberof ServiceDTO
   */
  permissions?: Array<PermissionBasicDTO> | null;
  /**
   *
   * @type {Array<SessionBasicDTO>}
   * @memberof ServiceDTO
   */
  sessions?: Array<SessionBasicDTO> | null;
  /**
   *
   * @type {UserBasicDTO}
   * @memberof ServiceDTO
   */
  user?: UserBasicDTO;
  /**
   *
   * @type {string}
   * @memberof ServiceDTO
   */
  userId?: string | null;
}

/**
 * Check if a given object implements the ServiceDTO interface.
 */
export function instanceOfServiceDTO(value: object): value is ServiceDTO {
  return true;
}

export function ServiceDTOFromJSON(json: any): ServiceDTO {
  return ServiceDTOFromJSONTyped(json, false);
}

export function ServiceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceDTO {
  if (json == null) {
    return json;
  }
  return {
    createdAt: json["createdAt"] == null ? undefined : new Date(json["createdAt"]),
    id: json["id"] == null ? undefined : json["id"],
    name: json["name"] == null ? undefined : json["name"],
    permissions: json["permissions"] == null ? undefined : (json["permissions"] as Array<any>).map(PermissionBasicDTOFromJSON),
    sessions: json["sessions"] == null ? undefined : (json["sessions"] as Array<any>).map(SessionBasicDTOFromJSON),
    user: json["user"] == null ? undefined : UserBasicDTOFromJSON(json["user"]),
    userId: json["userId"] == null ? undefined : json["userId"],
  };
}

export function ServiceDTOToJSON(json: any): ServiceDTO {
  return ServiceDTOToJSONTyped(json, false);
}

export function ServiceDTOToJSONTyped(value?: ServiceDTO | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    createdAt: value["createdAt"] === null ? null : (value["createdAt"] as any)?.toISOString(),
    id: value["id"],
    name: value["name"],
    permissions: value["permissions"] == null ? undefined : (value["permissions"] as Array<any>).map(PermissionBasicDTOToJSON),
    sessions: value["sessions"] == null ? undefined : (value["sessions"] as Array<any>).map(SessionBasicDTOToJSON),
    user: UserBasicDTOToJSON(value["user"]),
    userId: value["userId"],
  };
}
