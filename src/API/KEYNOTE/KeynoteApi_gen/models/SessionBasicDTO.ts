/* tslint:disable */
/* eslint-disable */
/**
 * ketnote-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SessionBasicDTO
 */
export interface SessionBasicDTO {
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    browser?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof SessionBasicDTO
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    device?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof SessionBasicDTO
     */
    expiresAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    ipAddress?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SessionBasicDTO
     */
    is2FAConfirmed?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    os?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    serviceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SessionBasicDTO
     */
    userId?: string | null;
}

/**
 * Check if a given object implements the SessionBasicDTO interface.
 */
export function instanceOfSessionBasicDTO(value: object): value is SessionBasicDTO {
    return true;
}

export function SessionBasicDTOFromJSON(json: any): SessionBasicDTO {
    return SessionBasicDTOFromJSONTyped(json, false);
}

export function SessionBasicDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionBasicDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'browser': json['browser'] == null ? undefined : json['browser'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'device': json['device'] == null ? undefined : json['device'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'id': json['id'] == null ? undefined : json['id'],
        'ipAddress': json['ipAddress'] == null ? undefined : json['ipAddress'],
        'is2FAConfirmed': json['is2FAConfirmed'] == null ? undefined : json['is2FAConfirmed'],
        'os': json['os'] == null ? undefined : json['os'],
        'serviceId': json['serviceId'] == null ? undefined : json['serviceId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function SessionBasicDTOToJSON(json: any): SessionBasicDTO {
    return SessionBasicDTOToJSONTyped(json, false);
}

export function SessionBasicDTOToJSONTyped(value?: SessionBasicDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'browser': value['browser'],
        'createdAt': value['createdAt'] === null ? null : ((value['createdAt'] as any)?.toISOString()),
        'device': value['device'],
        'expiresAt': value['expiresAt'] === null ? null : ((value['expiresAt'] as any)?.toISOString()),
        'id': value['id'],
        'ipAddress': value['ipAddress'],
        'is2FAConfirmed': value['is2FAConfirmed'],
        'os': value['os'],
        'serviceId': value['serviceId'],
        'userId': value['userId'],
    };
}

